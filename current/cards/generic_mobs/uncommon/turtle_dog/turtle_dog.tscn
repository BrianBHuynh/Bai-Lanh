[gd_scene load_steps=6 format=3 uid="uid://dm1v4fax3vowj"]

[ext_resource type="Texture2D" uid="uid://lcbwrvrqghy7" path="res://current/cards/generic_mobs/uncommon/turtle_dog/turtle_dog.png" id="2_xkrod"]
[ext_resource type="Script" path="res://current/scripts/common_scripts/playerData.gd" id="3_ite30"]

[sub_resource type="GDScript" id="GDScript_7t4n6"]
script/source = "extends Node2D

@export var card_name = \"Player\"

@export var health: int = 100 #Health amount of card
@export var phys_attack: int = 8 #physical Attack value of the card
@export var mag_attack: int = 8 #Magic attack value of the card
@export var phys_defense: int = 12 #Physical defense of the card
@export var mag_defense: int = 10 #Magical defense of the card
@export var speed: int = 6 #Speed of the card
@export var tags: Array = []

#Modifiers for shifting, are added or subtracted from the normal stats when shifting
@export var shifted_health: int = -25
@export var shifted_phys_attack: int = 4
@export var shifted_mag_attack: int = 4
@export var shifted_phys_defense: int = -2
@export var shifted_mag_defense: int = -2
@export var shifted_speed: int = 2
@export var shifted_tags: Array = []

#Position stats/effects should only be applied when the play button is pressed!
var pref_pos: Array = [] #Prefered possitions of the card
var pos: String = \"front\" #Current position

#Stats changed for being in the prefered positions
@export var pos_health: int = 10
@export var pos_phys_attack: int = -1
@export var pos_mag_attack: int = -1
@export var pos_phys_defense: int = 1
@export var pos_mag_defense: int = 1
@export var pos_speed: int = 0
@export var pos_tags: Array = []

var slot #Where the current slot is stored
var new_slot #Where a possible slot is

var offset: Vector2 #Used to store the offset between where the card is held and the mouse
var current_position #Where the card is currently resting, set at the start to where the card enters the scene tree for the first time

var default_color: Color = modulate #for default color
var default_size: Vector2 = Vector2(1,1) #Default size for the card

var held: bool = false

@export var shifted: bool = false
@export var friendly: bool = true

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	current_position = position
	if self.friendly == false:
		self.default_color = Color(Color.PALE_VIOLET_RED)
		self.modulate = Color(Color.PALE_VIOLET_RED)


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	if held and friendly:
		cards.hold_card(self)


func _on_card_held() -> void:
	held = true
	offset = get_global_mouse_position() - global_position
	scale = Vector2(1.5,1.5)


func _on_card_released() -> void:
	held = false
	cards.release_card(self)


func _on_body_entered(body: Node2D) -> void:
	cards.add_slot(self, body)


func _on_area_entered(area: Area2D) -> void:
	cards.add_card(self, area)


func _on_body_exited(body: Node2D) -> void:
	cards.remove_slot(self, body)


func _on_area_exited(area: Area2D) -> void:
	cards.remove_card(self, area)

func _on_mouse_entered() -> void:
	card_highlight()

func _on_mouse_exited() -> void:
	card_normalize()

func card_highlight():
	modulate = Color(Color.PALE_GOLDENROD)

func card_normalize():
	modulate = default_color
	scale = default_size

#function is formatted this way so that it is readable and customizable, keeping it in per card allows for more control
func get_target():
	if friendly:
		if not shifted:
			if pos == \"front\":
				return combat.get_target(combat.opposing_party)
			elif pos == \"center\":
				return combat.get_target(combat.opposing_party)
			elif pos == \"back\":
				return combat.get_target(combat.opposing_party)
			else:
				return combat.get_target(combat.opposing_party)
		else:
			if pos == \"front\":
				return combat.get_target(combat.opposing_party)
			elif pos == \"center\":
				return combat.get_target(combat.opposing_party)
			elif pos == \"back\":
				return combat.get_target(combat.opposing_party)
			else:
				return combat.get_target(combat.opposing_party)
	else:
		if not shifted:
			if pos == \"front\":
				return combat.get_target(combat.player_party)
			elif pos == \"center\":
				return combat.get_target(combat.player_party)
			elif pos == \"back\":
				return combat.get_target(combat.player_party)
			else:
				return combat.get_target(combat.player_party)
		else:
			if pos == \"front\":
				return combat.get_target(combat.player_party)
			elif pos == \"center\":
				return combat.get_target(combat.player_party)
			elif pos == \"back\":
				return combat.get_target(combat.player_party)
			else:
				return combat.get_target(combat.player_party)

func damage_physical(damage):
	if (damage - phys_defense) > 0:
		health = health-(damage-phys_defense)

func damage_magical(damage):
	if (damage - mag_defense) > 0:
		health = health-(damage-mag_defense)

func damage_true(damage):
	health = health-damage

func action():
	if is_instance_valid(slot):
		slot.action()
	if shifted:
		if pos == \"front\":
			shifted_front_action()
		elif pos == \"center\":
			shifted_center_action()
		elif pos == \"back\":
			shifted_back_action()
		else:
			shifted_default_action()
	else:
		if pos == \"front\":
			front_action()
		elif pos == \"center\":
			center_action()
		elif pos == \"back\":
			back_action()
		else:
			default_action()

func default_action():
	var enemy = get_target()
	var damage = (combat.RNG.randi_range(1,10)+phys_attack)
	combat_lib.phys_attack(self, enemy, damage)

#Should normally be called when standing in the front
func front_action():
	default_action()

#Should normally be called when standing in the center
func center_action():
	default_action()

#Should normally be called when standing in the center
func back_action():
	default_action()

#Should normally never be called as long as the card is in a slot
func shifted_default_action():
	default_action()

#Should normally be called when standing in the front
func shifted_front_action():
	default_action()

#Should normally be called when standing in the center
func shifted_center_action():
	default_action()

#Should normally be called when standing in the center
func shifted_back_action():
	default_action()
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_dhksn"]
size = Vector2(1348, 1918)

[sub_resource type="SpriteFrames" id="SpriteFrames_6ow15"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_xkrod")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}]

[node name="Card" type="Area2D"]
script = SubResource("GDScript_7t4n6")

[node name="Button" type="Button" parent="."]
offset_left = -68.0
offset_top = -96.0
offset_right = 68.0
offset_bottom = 96.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2(0.1, 0.1)
shape = SubResource("RectangleShape2D_dhksn")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.1, 0.1)
sprite_frames = SubResource("SpriteFrames_6ow15")

[node name="RichTextLabel" type="RichTextLabel" parent="."]
offset_left = -68.0
offset_top = 44.0
offset_right = 68.0
offset_bottom = 96.0
mouse_filter = 2
theme_override_font_sizes/normal_font_size = 10
script = ExtResource("3_ite30")

[connection signal="area_entered" from="." to="." method="_on_area_entered"]
[connection signal="area_exited" from="." to="." method="_on_area_exited"]
[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
[connection signal="button_down" from="Button" to="." method="_on_card_held"]
[connection signal="button_up" from="Button" to="." method="_on_card_released"]
[connection signal="mouse_entered" from="Button" to="." method="_on_mouse_entered"]
[connection signal="mouse_exited" from="Button" to="." method="_on_mouse_exited"]
